# -*- coding: utf-8 -*-
"""PolynomialVSMultinomialRegression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tlB4bjAUse8f3AZ8Ydq7fBoo6bHRMlVl
"""

# Load Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import r2_score, mean_squared_error
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, PolynomialFeatures
from sklearn.compose import ColumnTransformer

# Load data
df = pd.read_csv('/content/Medical_Insurance_Cost_Linear_Regression_Data.csv')

# View first five rows of dataset
df.head()

# List the categorical feature columns
categorical_features = df.select_dtypes(include='object').columns.to_list()
categorical_features

# Separate the features and the target variable
X = df.drop('charges', axis=1)
y = df['charges']
# Perform one hot encoding for categorical variables
onehot_encoder = OneHotEncoder(drop='first')

# Transform the data by applying the column transformer model
transformer = ColumnTransformer([('onehot', onehot_encoder, categorical_features)], remainder ='passthrough')

# Encode the categorical features and keeping the numeric features the same
X_encoded = transformer.fit_transform(X)

"""## Comparing Multiple and Polynomial Regression Estimates

"""

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size = 0.30, random_state = 413)

# Multiple Linear Regression
multiple_regr = LinearRegression()
multiple_regr.fit(X_train, y_train)
y_pred_multiple = multiple_regr.predict(X_test)

# Polynomial Regression
degree=2
poly_features = PolynomialFeatures(degree=degree)
X_poly_train = poly_features.fit_transform(X_train)
X_poly_test =  poly_features.transform(X_test)

poly_regr = LinearRegression()
poly_regr.fit(X_poly_train, y_train)
y_pred_poly = poly_regr.predict(X_poly_test)

# Evaluate performance
print("Multiple Linear Regression: ")
print("Test r-squared score: ", r2_score(y_test,y_pred_multiple))
print("Test MSE: ", mean_squared_error(y_test,y_pred_multiple))

print("Polynomial Regression: ")
print("Test r-squared score: ", r2_score(y_test,y_pred_poly))
print("Test MSE: ", mean_squared_error(y_test,y_pred_poly))

"""## Examining the Residual VS Predicted Values"""

import matplotlib.pyplot as plt

# Calculate residuals
residuals = y_test - y_pred_multiple

# Plot residuals vs predicted values
plt.figure(figsize=(10, 6))
plt.scatter(y_pred_multiple, residuals, alpha=0.5)
plt.axhline(y=0, color='r', linestyle='--')  # Add a horizontal line at y=0
plt.title('Residuals vs Predicted Values')
plt.xlabel('Predicted Values')
plt.ylabel('Residuals')
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt

# Calculate residuals
residuals = y_test - y_pred_poly

# Plot residuals vs predicted values
plt.figure(figsize=(10, 6))
plt.scatter(y_pred_poly, residuals, alpha=0.5)
plt.axhline(y=0, color='r', linestyle='--')  # Add a horizontal line at y=0
plt.title('Residuals vs Predicted Values')
plt.xlabel('Predicted Values')
plt.ylabel('Residuals')
plt.grid(True)
plt.show()

